:root {
  --busy_spinner_border_width: 0.2rem;
}

.busy_spinner {
  border: var(--busy_spinner_border_width) solid var(--subtle_accent_color);
  border-top-color: var(--accent_color);
  border-radius: 50%;
  animation: spin 1s linear infinite;
  /*
   * Override either the width or the height to have that determine the size of the spinner and
   * then the other dimension will be taken care of by `aspect-ratio`.
   */
  aspect-ratio: 1 / 1;
  height: auto;
  width: auto;
}

@keyframes spin {
  0% { transform: rotate(0); }
  100% { transform: rotate(1turn); }
}

.busy_spinner.medium_size {
  height: 5rem;
}

/* Because this relies on `position: absolute`, the parent needs to be a positioned element. */
.sub_spinner_overlay {
  background-color: rgba(0, 0, 0, 0.7);
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  margin: 0;
  padding: 0;
  display: flex;
  border-width: 0;
  container-type: size;
  container-name: resize-box;
}

.sub_spinner_overlay .busy_spinner {
  width: calc(100% - 2 * var(--busy_spinner_border_width));
  aspect-ratio: 1/1;
  margin: auto;
}

fieldset .sub_spinner_overlay {
  margin-top: calc(
    -1 * (
      var(--fieldset_top_padding) +
      ((var(--fieldset_legend_height) - var(--fieldset_border_width)) / 2)
    )
  );
  margin-bottom: calc(-1 * var(--fieldset_bottom_padding));
  margin-left: calc(-1 * var(--fieldset_horizontal_padding));
  margin-right: calc(-1 * var(--fieldset_horizontal_padding));
  border-radius: var(--border_radius);
  padding: 0.6rem;
}

/*
 * This allows the spinner to occupy as much space as possible while retaining the correct aspect
 * ratio.
 */
@container resize-box (aspect-ratio > 1/1) {
  .sub_spinner_overlay .busy_spinner {
    width: auto;
    height: calc(100% - 2 * var(--busy_spinner_border_width));
  }
}
